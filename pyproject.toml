[tool.poetry]
name = "cs224u-utils"
version = "0.0.1"
description = "Custom utils for Stanford course cs224u."
authors = ["Matthew Billman <mgbvox@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.9"
pydantic = "^2.6.3"


[tool.poetry.group.dev.dependencies]
pytest = "^8.0.2"
black = "^24.2.0"
mypy = "^1.8.0"
ruff = "^0.3.1"
pre-commit = "^3.6.2"
coverage = "^7.4.3"
tox = "^4.14.1"


[tool.poetry.group.experimental.dependencies]
mypy = {extras = ["mypyc"], version = "^1.8.0"}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.coverage.run]
branch = true
omit = [
    "*/__init__.py",
    "*/test_*.py",
    "*/tests/*.py",
    "*/conftest.py",
    "*/venv/*",
    "*/virtualenv/*",
    "*/.venv/*",
    "*/.virtualenv/*",
    "*/env/*",
    "*/.env/*",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == '__main__':",
    "logger",
    "try",
    "except",
    "^\\s*self\\.\\w+(:\\s*[^=]+)?\\s*=.*$",
    "continue",
]

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py39"
extend-unsafe-fixes = ["D"]

[tool.ruff.lint]
# List of rules: https://docs.astral.sh/ruff/rules
select = [
    # flake8-builtins
    "A",
    # flake8-commas
    "COM812",
    # flake8-comprehensions
    "C4",
    # pydocstyle
    "D",
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # flake8-implicit-str-concat
    "ISC",
    # pep8-naming
    "N",
    # flake8-annotations
    "ANN",
    # flake8-async
    "ASYNC",
    # flake8-bandid selected
    "S",
    # flake8-print
    "T20",
    # flake8-return
    "RET",
    # flake8-simplify
    "SIM",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # eradicate
    "ERA",
    # pandas-vet
    "PD",
    # Import sort
    "I",
    # avoid shadowing
    "PLW",
]
ignore = [
    # __init__.py docstrings
    "D104",
    # pickle is inherent to .disk_cache
    "S301",
    # assertions should be allowed
    "S101",
    # args/kwargs are needed for decorators
    "ANN401",
    # Doc classes at top level, not in __init__
    "D107",
    # No type annotations to self
    "ANN101",
    # Yes, we DO annotate overloads
    "D418",
    # First lines of docstrings can be atypical
    "D415",
]

[tool.ruff.format]
docstring-code-format = true
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"**/{tests,docs}/*" = ["ALL"]
"**__init__.py" = ["F401"]
